@model PageModel<DocumentModel>
@{
    ViewBag.Title = Text.Reading;
}
<!--Page Heading -->
<div class="d-flex align-items-center justify-content-between mb-4">
    <h1 class="h3 mb-0 text-gray-800">
        <a title="@Text.Back" href="@(!string.IsNullOrEmpty(Model.ReturnUrl) ? Model.ReturnUrl : Url.Action("Index", "Document"))" class="text-gray-800">
            <i class="fas fa-chevron-circle-left"></i>
        </a>
    </h1>
    <div class="d-none d-sm-inline-block btn-group" role="group" aria-label="@Text.Switch_view">
        <button name="scroll-view" type="button" class="btn btn-sm btn-success shadow-sm"><i class="fas fa-arrow-down fa-sm text-white-50"></i> @Text.Scroll</button>
        <button name="paging-view" type="button" class="btn btn-sm btn-success shadow-sm"><i class="fas fa-arrow-right fa-sm text-white-50"></i> @Text.Paging</button>
    </div>
    <div class="d-block d-sm-none btn-group" role="group" aria-label="@Text.Switch_view">
        <button name="scroll-view" type="button" class="btn btn-sm btn-success btn-circle shadow-sm"><i class="fas fa-arrow-down"></i></button>
        <button name="paging-view" type="button" class="btn btn-sm btn-success btn-circle shadow-sm"><i class="fas fa-arrow-right"></i></button>
    </div>
</div>

<div name="pagination-controls" class="row mb-2" style="display:none;">
    <div class="col-3 text-left">
        <a id="prev" class="btn btn-outline-success" href="javascript:;">
            <i class="fas fa-chevron-left"></i>
        </a>
    </div>
    <div class="col-6 d-flex justify-content-center">
        <div class="input-group input-page-number">
            <input name="input-display-page-number" type="number" class="form-control" min="1" value="1" aria-describedby="display-page-number">
            <div class="input-group-append">
                <span class="input-group-text" name="display-page-number"></span>
            </div>
        </div>
    </div>
    <div class="col-3 text-right">
        <a id="next" class="btn btn-outline-success" href="javascript:;">
            <i class="fas fa-chevron-right"></i>
        </a>
    </div>
</div>

<div class="row mb-2">
    <div id="content-viewer" class="col-md-12">
        <div id="w_loading" class="d-flex justify-content-center">
            <div class="text-center" style="width:100%">
                @Text.Loading<br/>
                <img src="~/img/biblio_iuc.jpg" class="img-fluid" />
            </div>
        </div>
    </div>
</div>

<div name="pagination-controls" class="row mb-2" style="display:none;">
    <div class="col-3 text-left">
        <a id="prev" class="btn btn-outline-success" href="javascript:;">
            <i class="fas fa-chevron-left"></i>
        </a>
    </div>
    <div class="col-6 d-flex justify-content-center">
        <div class="input-group input-page-number">
            <input name="input-display-page-number" type="number" class="form-control" min="1" value="1" aria-describedby="display-page-number">
            <div class="input-group-append">
                <span class="input-group-text" name="display-page-number"></span>
            </div>
        </div>
    </div>
    <div class="col-3 text-right">
        <a id="next" class="btn btn-outline-success" href="javascript:;">
            <i class="fas fa-chevron-right"></i>
        </a>
    </div>
</div>

@section scripts{
    <script src="~/js/pdf.js"></script>
    <script>
        var pdfDoc = null,
            pageNum = @((Model?.DataModel?.LastPageNumberRead ?? 0) > 0 ? (Model.DataModel.LastPageNumberRead - 1) : 0),
            pageSize = 3,
            pageRendering = false,
            pageNumPending = null,
            canvasContainer = document.getElementById('content-viewer'),
            scrollLoad = false,
            scrollPos = 0,
            isUp = false;

        $('button[name="scroll-view"]').click(function () {
            scrollLoad = true;
            removeChildrenExcept('w_' + (pageNum + 1));
            $('div[name="pagination-controls"]').hide();
            if (pageNum != 0)
                pageNum--;
            fetchNext(1);
        });

        $('button[name="paging-view"]').click(function () {
            if (pageNum > 0 && pageNum % pageSize == 0)
                pageNum -= pageSize;
            else
                pageNum = 0;
            removeChildrenExcept('w_' + (pageNum + 1));
            $('div[name="pagination-controls"]').show();
            onNextPage();
            $('span[name="display-page-number"]').html(' / ' + pdfDoc.numPages);
            $('input[name="input-display-page-number"]').attr('max', pdfDoc.numPages);
            scrollLoad = false;
        });

        $('input[name="input-display-page-number"]').on('change keyup', function () {
            removeChildrenExcept(null);
            pageNum = parseInt($('input[name="input-display-page-number"]').val());
            if (pageNum < 1 || pageNum > pdfDoc.numPages) {
                return;
            }
            queueRenderPage(pageNum);
        })

        function initPdf(url, callback) {
            pdfjsLib.getDocument(url).promise.then(function (doc) {
                pdfDoc = doc;
                callback();
            });
        }

        function removeChildrenExcept(except) {
            var num = pageNum;
            if (num == 0)
                num = 1;
            var length = $(canvasContainer).children().length;
            for (i = num; i <= length + num; i++) {
                if (except != ('w_' + i)) {
                    $(canvasContainer).children('#w_' + i).remove();
                }
            }
        }

        var inProcess = false;
        function save_last_read() {
            if (!inProcess) {
                inProcess = true;
                var url = "@Url.Action("SaveLastRead", "Document", new { id = Model?.DataModel?.Code ?? "" })" + "?pageNumber=" + pageNum;
                alert(url);
                $.getJSON(url, function (result) {
                    inProcess = false;
                });
            }
        }

        $(window).on("beforeunload", function () {
            save_last_read();
        });

        function renderPage(num, direction = null, index = 0) {
            pageRendering = true;
            // Using promise to fetch the page
            pdfDoc.getPage(num).then(function (page) {
                var viewport = page.getViewport({ scale: 1 });

                var computedStyle = getComputedStyle(canvasContainer);

                canvasContainerWidth = canvasContainer.clientWidth - (parseFloat(computedStyle.paddingLeft) + parseFloat(computedStyle.paddingRight))

                let scale = canvasContainerWidth / viewport.width;

                viewport = page.getViewport({ scale: scale });

                var wrapper = $('#w_' + num)[0];
                if (!wrapper) {
                    wrapper = document.createElement("div");
                    wrapper.className = "canvas-wrapper";
                    wrapper.id = 'w_' + num;
                    wrapper.style = 'height:' + Math.floor(viewport.height) + 'px;width:' + Math.floor(viewport.width) + 'px;margin-bottom:10px';
                }
                if (!$(wrapper).children('#_' + num)[0]) {
                    var canvas = document.createElement('canvas');
                    var ctx = canvas.getContext('2d');
                    canvas.id = '_' + num;
                    canvas.height = viewport.height;
                    canvas.width = viewport.width;

                    var renderContext = {
                        canvasContext: ctx,
                        viewport: viewport
                    };

                    wrapper.appendChild(canvas);

                    if ($(canvasContainer).children('#w_loading')[0])
                        $(canvasContainer).children('#w_loading').remove();

                    if (!$(canvasContainer).children('#w_' + num)[0]) {
                        if (isUp)
                            canvasContainer.insertBefore(wrapper, canvasContainer.firstChild);
                        else
                            canvasContainer.appendChild(wrapper);
                    }

                    var renderTask = page.render(renderContext);

                    // Wait for rendering to finish
                    renderTask.promise.then(function () {
                        pageRendering = false;
                        if (pageNumPending !== null) {
                            // New page rendering is pending
                            renderPage(pageNumPending);
                            pageNumPending = null;
                        }
                        repeat(direction, index);
                    });
                } else {
                    pageRendering = false;
                    repeat(direction, index);
                }
            });

            // Update page counters
            //document.getElementById('page_num').textContent = num;
        }

        function repeat(direction, index) {
            if (direction) {
                var i = index;
                if (i < pageSize) {
                    if (direction === 'prev') {
                        fetchPrev(++i);
                    }
                    else {
                        fetchNext(++i);
                    }
                }
            }
        }

        function fetchPrev(index = 1) {
            if (pageNum > 1) {
                renderPage(--pageNum, 'prev', index);
            }
        }

        function fetchNext(index = 1) {
            if (pageNum < pdfDoc.numPages) {
                renderPage(++pageNum, 'next', index);
            }
        }

        //function renderPage(page) {

        //    let viewport = page.getViewport({ scale: 1 });

        //    let computedStyle = getComputedStyle(_canvasContainer);

        //    canvasContainerWidth = _canvasContainer.clientWidth - (parseFloat(computedStyle.paddingLeft) + parseFloat(computedStyle.paddingRight))

        //    let scale = canvasContainerWidth / viewport.width;

        //    viewport = page.getViewport({ scale: scale });

        //    let wrapper = document.createElement("div");
        //    wrapper.className = "canvas-wrapper";
        //    wrapper.id = '_' + num;
        //    let canvas = document.createElement('canvas');
        //    let ctx = canvas.getContext('2d');

        //    let renderContext = {
        //        canvasContext: ctx,
        //        viewport: viewport
        //    };

        //    canvas.height = viewport.height;
        //    canvas.width = viewport.width;

        //    wrapper.appendChild(canvas)

        //    j = 0;

        //    if (_isUp) {
        //        _canvasContainer.insertBefore(wrapper, _canvasContainer.firstChild);
        //        while (j < _pageSize && (num % _pageSize) == 0) {
        //            j++;
        //            $(_canvasContainer).children('#_' + (num + j)).remove();
        //        }
        //    }
        //    else {
        //        _canvasContainer.appendChild(wrapper);
        //        while (j < _pageSize && (num % _pageSize) == 0) {
        //            j++;
        //            $(_canvasContainer).children('#_' + (num - _pageSize)).remove();
        //        }
        //    }
        //    page.render(renderContext);
        //}

        function queueRenderPage(num) {
            if (pageRendering) {
                pageNumPending = num;
            } else {
                renderPage(num);
                $('input[name="input-display-page-number"]').val(num);
            }
        }

        /**
         * Displays previous page.
         */
        function onPrevPage() {
            if (pageNum <= 1) {
                return;
            }
            removeChildrenExcept(null);
            pageNum--;
            queueRenderPage(pageNum);
            $(window).scrollTop(0);
        }
        document.getElementById('prev').addEventListener('click', onPrevPage);

        /**
         * Displays next page.
         */
        function onNextPage() {
            if (pageNum >= pdfDoc.numPages) {
                return;
            }
            removeChildrenExcept(null);
            pageNum++;
            queueRenderPage(pageNum);
            $(window).scrollTop(0);
        }
        document.getElementById('next').addEventListener('click', onNextPage);

        //var page = null;
       // function renderPages() {
       //     for (let num = (((pageNum - 1) * pageSize) + 1); num <= (pageNum * pageSize); num++) {
       //         onNextPage(num);
       //     }
       //}


        var downPosition = (document.body.getBoundingClientRect()).top;
        var downPositionToDelete = (document.body.getBoundingClientRect()).top;
        var indexToBeginDelete = pageSize;
        $(window).scroll(function () {
            if (scrollLoad) {
                if ((document.body.getBoundingClientRect()).top > scrollPos) {
                    isUp = true;
                    if ($('#w_' + pageNum)[0]) {
                        var size = $('#w_' + pageNum).outerHeight() / 3;
                        var sizeToDelete = $('#w_' + pageNum).outerHeight();
                        var distance = Math.abs(Math.abs(scrollPos) - Math.abs(downPosition));
                        var distanceToDelete = Math.abs(Math.abs(scrollPos) - Math.abs(downPositionToDelete));
                        if (distance >= size) {

                            scrollLoad = false;
                            fetchPrev(1);
                            downPosition = (document.body.getBoundingClientRect()).top;

                            if (distanceToDelete >= sizeToDelete && pdfDoc.numPages > pageSize && indexToBeginDelete >= pageSize) {
                                j = pageSize;
                                max = 1;
                                var index = indexToBeginDelete;
                                while (j > max) {
                                    removeIndex = index + j;
                                    $(canvasContainer).children().eq(removeIndex).children().remove();
                                    j--;
                                }
                                indexToBeginDelete--;
                                downPositionToDelete = (document.body.getBoundingClientRect()).top;
                            }
                            scrollLoad = true;
                        }
                    }
                } else {
                    isUp = false;
                    downPosition = scrollPos;
                    downPositionToDelete = scrollPos;
                    //if (scrollLoad && ($(document).height() - $(this).height() - 100) < $(this).scrollTop()) {
                    if ($('#w_' + pageNum)[0]) {
                        var size = ($('#w_' + pageNum).outerHeight() * pageNum) - 600;
                        if (Math.abs(scrollPos) >= size) {
                            scrollLoad = false;
                            fetchNext(1);

                            if (pdfDoc.numPages > pageSize) {
                                pageIndex = pageNum - 1;
                                indexToBeginDelete = pageIndex;

                                j = 0;
                                max = pageIndex == pageSize ? pageSize - 1 : pageSize;
                                while (j < max) {
                                    removeIndex = pageIndex - (pageSize - 1) - j;
                                    $(canvasContainer).children().eq(removeIndex).children().remove();
                                    j++;
                                }
                            }

                            scrollLoad = true;
                        }

                    }
                }
            // saves the new position for iteration.

            }
            scrollPos = (document.body.getBoundingClientRect()).top;
        });


        $(function () {
            scrollLoad = true;
            initPdf({ data: atob('@Html.Raw(Model.DataModel.FileBase64)') }, fetchNext);

            document.addEventListener("contextmenu", function (e) {
                e.preventDefault();
            }, false);
            document.addEventListener("keydown", function (e) {
                //document.onkeydown = function(e) {
                // "I" key
                if (e.ctrlKey && e.shiftKey && e.keyCode == 73) {
                    disabledEvent(e);
                }
                // "J" key
                if (e.ctrlKey && e.shiftKey && e.keyCode == 74) {
                    disabledEvent(e);
                }
                // "S" key + macOS
                if (e.keyCode == 83 && (navigator.platform.match("Mac") ? e.metaKey : e.ctrlKey)) {
                    disabledEvent(e);
                }
                // "U" key
                if (e.ctrlKey && e.keyCode == 85) {
                    disabledEvent(e);
                }
                // "F12" key
                if (event.keyCode == 123) {
                    disabledEvent(e);
                }
            }, false);
            function disabledEvent(e) {
                if (e.stopPropagation) {
                    e.stopPropagation();
                } else if (window.event) {
                    window.event.cancelBubble = true;
                }
                e.preventDefault();
                return false;
            }
            $('body').on('contextmenu', function () {
                return false;
            });
        });
    </script>
}